//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Nightingale.Tests.Queries {
    using System;
    
    
    /// <summary>
    ///   Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
    /// </summary>
    // Diese Klasse wurde von der StronglyTypedResourceBuilder automatisch generiert
    // -Klasse über ein Tool wie ResGen oder Visual Studio automatisch generiert.
    // Um einen Member hinzuzufügen oder zu entfernen, bearbeiten Sie die .ResX-Datei und führen dann ResGen
    // mit der /str-Option erneut aus, oder Sie erstellen Ihr VS-Projekt neu.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class ExpectedQueryOutputs {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal ExpectedQueryOutputs() {
        }
        
        /// <summary>
        ///   Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Nightingale.Tests.Queries.ExpectedQueryOutputs", typeof(ExpectedQueryOutputs).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
        ///   Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT Name, Alias, BirthDate, DeathDate, WebLink, Biography, Note, Label, FK_AnotherArtist_ID, Id, Deleted, Version FROM Artist artist WHERE (artist.Deleted = @p0) AND (artist.Id = @p1) ähnelt.
        /// </summary>
        internal static string Query_Global_Filter {
            get {
                return ResourceManager.GetString("Query_Global_Filter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT Name, Alias, BirthDate, DeathDate, WebLink, Biography, Note, Label, FK_AnotherArtist_ID, Id, Deleted, Version FROM Artist artist WHERE (artist.Deleted = @p0 AND artist.Note IS @p1) AND (artist.Id = @p2) ähnelt.
        /// </summary>
        internal static string Query_Global_Filter_Multiple {
            get {
                return ResourceManager.GetString("Query_Global_Filter_Multiple", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT FK_AnotherArtist_ID, FK_SecondArtist_ID, StatusCode, Id, Deleted, Version FROM ArtistStatisticValues artiststatisticvalues INNER JOIN Artist a0 ON a0.Id = artiststatisticvalues.FK_AnotherArtist_ID WHERE (a0.Alias IS NOT @p0) ähnelt.
        /// </summary>
        internal static string Query_Inner_Join_For_Mandatory_Fields_Works {
            get {
                return ResourceManager.GetString("Query_Inner_Join_For_Mandatory_Fields_Works", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT FK_AnotherArtist_ID, FK_SecondArtist_ID, StatusCode, Id, Deleted, Version FROM ArtistStatisticValues artiststatisticvalues LEFT JOIN Artist a0 ON a0.Id = artiststatisticvalues.FK_SecondArtist_ID WHERE (a0.Alias IS NOT @p0) ähnelt.
        /// </summary>
        internal static string Query_Left_Join_For_Non_Mandatory_Fields_Works {
            get {
                return ResourceManager.GetString("Query_Left_Join_For_Non_Mandatory_Fields_Works", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT FK_AnotherArtist_ID, FK_SecondArtist_ID, StatusCode, Id, Deleted, Version FROM ArtistStatisticValues artiststatisticvalues WHERE (artiststatisticvalues.Id = @p0) ähnelt.
        /// </summary>
        internal static string Query_Max_Results_Are_Applied_When_Not_Null_False {
            get {
                return ResourceManager.GetString("Query_Max_Results_Are_Applied_When_Not_Null_False", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT FK_AnotherArtist_ID, FK_SecondArtist_ID, StatusCode, Id, Deleted, Version FROM ArtistStatisticValues artiststatisticvalues WHERE (artiststatisticvalues.Id = @p0) LIMIT 1 ähnelt.
        /// </summary>
        internal static string Query_Max_Results_Are_Applied_When_Not_Null_True {
            get {
                return ResourceManager.GetString("Query_Max_Results_Are_Applied_When_Not_Null_True", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT FK_AnotherArtist_ID, FK_SecondArtist_ID, StatusCode, Id, Deleted, Version FROM ArtistStatisticValues artiststatisticvalues INNER JOIN Artist a0 ON a0.Id = artiststatisticvalues.FK_AnotherArtist_ID WHERE (a0.Alias IS @p0) AND (a0.Biography IS @p1 AND a0.BirthDate IS NOT @p2) ähnelt.
        /// </summary>
        internal static string Query_Multiple_ConditionGroups_And_Works {
            get {
                return ResourceManager.GetString("Query_Multiple_ConditionGroups_And_Works", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT FK_AnotherArtist_ID, FK_SecondArtist_ID, StatusCode, Id, Deleted, Version FROM ArtistStatisticValues artiststatisticvalues INNER JOIN Artist a0 ON a0.Id = artiststatisticvalues.FK_AnotherArtist_ID WHERE (a0.Alias IS @p0) OR (a0.Biography IS @p1 AND a0.BirthDate IS NOT @p2) ähnelt.
        /// </summary>
        internal static string Query_Multiple_ConditionGroups_Or_Works {
            get {
                return ResourceManager.GetString("Query_Multiple_ConditionGroups_Or_Works", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT Name, Alias, BirthDate, DeathDate, WebLink, Biography, Note, Label, FK_AnotherArtist_ID, Id, Deleted, Version FROM Artist artist WHERE (artist.Id = @p0) ähnelt.
        /// </summary>
        internal static string Query_No_Filter {
            get {
                return ResourceManager.GetString("Query_No_Filter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT Name, Alias, BirthDate, DeathDate, WebLink, Biography, Note, Label, FK_AnotherArtist_ID, Id, Deleted, Version FROM Artist artist LEFT JOIN Artist a0 ON a0.Id = artist.FK_AnotherArtist_ID WHERE (a0.Alias = @p0) ähnelt.
        /// </summary>
        internal static string Query_No_Sorting {
            get {
                return ResourceManager.GetString("Query_No_Sorting", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT FK_AnotherArtist_ID, FK_SecondArtist_ID, StatusCode, Id, Deleted, Version FROM ArtistStatisticValues artiststatisticvalues WHERE (artiststatisticvalues.FK_SecondArtist_ID IS NOT @p0) ähnelt.
        /// </summary>
        internal static string Query_Null_Checks_On_Foreign_Properties_Do_Not_Create_Joins {
            get {
                return ResourceManager.GetString("Query_Null_Checks_On_Foreign_Properties_Do_Not_Create_Joins", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT FK_AnotherArtist_ID, FK_SecondArtist_ID, StatusCode, Id, Deleted, Version FROM ArtistStatisticValues artiststatisticvalues WHERE (artiststatisticvalues.FK_SecondArtist_ID IS @p0) ähnelt.
        /// </summary>
        internal static string Query_Operator_Equals_For_Null_Works {
            get {
                return ResourceManager.GetString("Query_Operator_Equals_For_Null_Works", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT FK_AnotherArtist_ID, FK_SecondArtist_ID, StatusCode, Id, Deleted, Version FROM ArtistStatisticValues artiststatisticvalues WHERE (artiststatisticvalues.Id = @p0) ähnelt.
        /// </summary>
        internal static string Query_Operator_Equals_Works {
            get {
                return ResourceManager.GetString("Query_Operator_Equals_Works", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT FK_AnotherArtist_ID, FK_SecondArtist_ID, StatusCode, Id, Deleted, Version FROM ArtistStatisticValues artiststatisticvalues WHERE (artiststatisticvalues.Id &gt; @p0) ähnelt.
        /// </summary>
        internal static string Query_Operator_GreaterThan_Works {
            get {
                return ResourceManager.GetString("Query_Operator_GreaterThan_Works", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT FK_AnotherArtist_ID, FK_SecondArtist_ID, StatusCode, Id, Deleted, Version FROM ArtistStatisticValues artiststatisticvalues WHERE (artiststatisticvalues.Id &gt;= @p0) ähnelt.
        /// </summary>
        internal static string Query_Operator_GreaterThanOrEquals_Works {
            get {
                return ResourceManager.GetString("Query_Operator_GreaterThanOrEquals_Works", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT FK_AnotherArtist_ID, FK_SecondArtist_ID, StatusCode, Id, Deleted, Version FROM ArtistStatisticValues artiststatisticvalues WHERE (artiststatisticvalues.Id &lt; @p0) ähnelt.
        /// </summary>
        internal static string Query_Operator_LessThan_Works {
            get {
                return ResourceManager.GetString("Query_Operator_LessThan_Works", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT FK_AnotherArtist_ID, FK_SecondArtist_ID, StatusCode, Id, Deleted, Version FROM ArtistStatisticValues artiststatisticvalues WHERE (artiststatisticvalues.Id &lt;= @p0) ähnelt.
        /// </summary>
        internal static string Query_Operator_LessThanOrEquals_Works {
            get {
                return ResourceManager.GetString("Query_Operator_LessThanOrEquals_Works", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT FK_AnotherArtist_ID, FK_SecondArtist_ID, StatusCode, Id, Deleted, Version FROM ArtistStatisticValues artiststatisticvalues WHERE (artiststatisticvalues.FK_SecondArtist_ID IS NOT @p0) ähnelt.
        /// </summary>
        internal static string Query_Operator_NotEquals_For_Null_Works {
            get {
                return ResourceManager.GetString("Query_Operator_NotEquals_For_Null_Works", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT FK_AnotherArtist_ID, FK_SecondArtist_ID, StatusCode, Id, Deleted, Version FROM ArtistStatisticValues artiststatisticvalues WHERE (artiststatisticvalues.Id != @p0) ähnelt.
        /// </summary>
        internal static string Query_Operator_NotEquals_Works {
            get {
                return ResourceManager.GetString("Query_Operator_NotEquals_Works", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT Name, Alias, BirthDate, DeathDate, WebLink, Biography, Note, Label, FK_AnotherArtist_ID, Id, Deleted, Version FROM Artist artist LEFT JOIN Artist a0 ON a0.Id = artist.FK_AnotherArtist_ID WHERE (a0.Alias = @p0) ORDER BY a0.Alias DESC, artist.Name ASC, a0.Biography DESC ähnelt.
        /// </summary>
        internal static string Query_Resolves_Multiple_Sorting_Expressions {
            get {
                return ResourceManager.GetString("Query_Resolves_Multiple_Sorting_Expressions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT Name, Alias, BirthDate, DeathDate, WebLink, Biography, Note, Label, FK_AnotherArtist_ID, Id, Deleted, Version FROM Artist artist LEFT JOIN Artist a0 ON a0.Id = artist.FK_AnotherArtist_ID WHERE (a0.Alias = @p0) ORDER BY a0.Alias ASC ähnelt.
        /// </summary>
        internal static string Query_Resolves_Sorting_Expression_Ascending {
            get {
                return ResourceManager.GetString("Query_Resolves_Sorting_Expression_Ascending", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT Name, Alias, BirthDate, DeathDate, WebLink, Biography, Note, Label, FK_AnotherArtist_ID, Id, Deleted, Version FROM Artist artist LEFT JOIN Artist a0 ON a0.Id = artist.FK_AnotherArtist_ID WHERE (a0.Alias = @p0) ORDER BY a0.Alias DESC ähnelt.
        /// </summary>
        internal static string Query_Resolves_Sorting_Expression_Descending {
            get {
                return ResourceManager.GetString("Query_Resolves_Sorting_Expression_Descending", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT FK_AnotherArtist_ID, FK_SecondArtist_ID, StatusCode, Id, Deleted, Version FROM ArtistStatisticValues artiststatisticvalues INNER JOIN Artist a0 ON a0.Id = artiststatisticvalues.FK_AnotherArtist_ID WHERE (a0.Alias IS @p0 AND a0.Biography IS NOT @p1) ähnelt.
        /// </summary>
        internal static string Query_Same_FK_Access_Does_Not_Generate_Multiple_Joins {
            get {
                return ResourceManager.GetString("Query_Same_FK_Access_Does_Not_Generate_Multiple_Joins", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT Name, Alias, BirthDate, DeathDate, WebLink, Biography, Note, Label, FK_AnotherArtist_ID, Id, Deleted, Version FROM Artist artist LEFT JOIN Artist a0 ON a0.Id = artist.FK_AnotherArtist_ID LEFT JOIN Artist a1 ON a1.Id = a0.FK_AnotherArtist_ID WHERE (artist.Name = @p0 AND a0.Note = @p1 OR artist.Alias = @p2 AND a1.Note != @p3) ähnelt.
        /// </summary>
        internal static string Query_Supports_Complex_Expressions {
            get {
                return ResourceManager.GetString("Query_Supports_Complex_Expressions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT Name, Alias, BirthDate, DeathDate, WebLink, Biography, Note, Label, FK_AnotherArtist_ID, Id, Deleted, Version FROM Artist artist LEFT JOIN Artist a0 ON a0.Id = artist.FK_AnotherArtist_ID LEFT JOIN Artist a1 ON a1.Id = a0.FK_AnotherArtist_ID WHERE (artist.Name LIKE @p0 AND artist.FK_AnotherArtist_ID IS @p1 OR a1.Name = @p2) ähnelt.
        /// </summary>
        internal static string Query_Supports_Complex_Expressions2 {
            get {
                return ResourceManager.GetString("Query_Supports_Complex_Expressions2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT Name, Alias, BirthDate, DeathDate, WebLink, Biography, Note, Label, FK_AnotherArtist_ID, Id, Deleted, Version FROM Artist artist WHERE (artist.Name = @p0) ähnelt.
        /// </summary>
        internal static string Query_Supports_Right_MemberExpression {
            get {
                return ResourceManager.GetString("Query_Supports_Right_MemberExpression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT Name, Alias, BirthDate, DeathDate, WebLink, Biography, Note, Label, FK_AnotherArtist_ID, Id, Deleted, Version FROM Artist artist WHERE (artist.Name LIKE @p0 AND artist.Alias = @p1) ähnelt.
        /// </summary>
        internal static string Query_Supports_String_Contains {
            get {
                return ResourceManager.GetString("Query_Supports_String_Contains", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT Name, Alias, BirthDate, DeathDate, WebLink, Biography, Note, Label, FK_AnotherArtist_ID, Id, Deleted, Version FROM Artist artist WHERE (artist.Name LIKE @p0 AND artist.Alias = @p1) ähnelt.
        /// </summary>
        internal static string Query_Supports_String_EndsWith {
            get {
                return ResourceManager.GetString("Query_Supports_String_EndsWith", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT Name, Alias, BirthDate, DeathDate, WebLink, Biography, Note, Label, FK_AnotherArtist_ID, Id, Deleted, Version FROM Artist artist WHERE (artist.Name LIKE @p0 AND artist.Alias = @p1) ähnelt.
        /// </summary>
        internal static string Query_Supports_String_StartsWith {
            get {
                return ResourceManager.GetString("Query_Supports_String_StartsWith", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT e.Name,e.Alias,e.BirthDate,e.DeathDate,e.WebLink,e.Biography,e.Note,e.Label,e.FK_AnotherArtist_ID,e.Id,e.Deleted,e.Version FROM Artist e WHERE (SELECT COUNT(e1.Id) FROM ArtistStatisticValues e1 INNER JOIN Artist v0 ON v0.Id = e1.FK_AnotherArtist_ID WHERE (v0.Name = @p0) AND e1.FK_AnotherArtist_ID = e.Id) = (SELECT COUNT(e1.Id) FROM ArtistStatisticValues e1 INNER JOIN Artist v0 ON v0.Id = e1.FK_AnotherArtist_ID WHERE e1.FK_AnotherArtist_ID = e.Id)  ähnelt.
        /// </summary>
        internal static string Queryable_All {
            get {
                return ResourceManager.GetString("Queryable_All", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT e.Name,e.Alias,e.BirthDate,e.DeathDate,e.WebLink,e.Biography,e.Note,e.Label,e.FK_AnotherArtist_ID,e.Id,e.Deleted,e.Version FROM Artist e WHERE e.Id IN (SELECT e1.FK_AnotherArtist_ID FROM ArtistStatisticValues e1 INNER JOIN Artist v0 ON v0.Id = e1.FK_AnotherArtist_ID WHERE (v0.Name = @p0) AND e1.FK_AnotherArtist_ID = e.Id)  ähnelt.
        /// </summary>
        internal static string Queryable_Any {
            get {
                return ResourceManager.GetString("Queryable_Any", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT e.Name,e.Alias,e.BirthDate,e.DeathDate,e.WebLink,e.Biography,e.Note,e.Label,e.FK_AnotherArtist_ID,e.Id,e.Deleted,e.Version FROM Artist e WHERE e.Name LIKE @p0  ähnelt.
        /// </summary>
        internal static string Queryable_Contains {
            get {
                return ResourceManager.GetString("Queryable_Contains", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT e.Name,e.Alias,e.BirthDate,e.DeathDate,e.WebLink,e.Biography,e.Note,e.Label,e.FK_AnotherArtist_ID,e.Id,e.Deleted,e.Version FROM Artist e WHERE (e.Name = @p0)  ähnelt.
        /// </summary>
        internal static string Queryable_Equals {
            get {
                return ResourceManager.GetString("Queryable_Equals", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT e.Name,e.Alias,e.BirthDate,e.DeathDate,e.WebLink,e.Biography,e.Note,e.Label,e.FK_AnotherArtist_ID,e.Id,e.Deleted,e.Version FROM Artist e WHERE (e.Name IS NOT @p0)  ähnelt.
        /// </summary>
        internal static string Queryable_Equals_Not_Null {
            get {
                return ResourceManager.GetString("Queryable_Equals_Not_Null", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT e.Name,e.Alias,e.BirthDate,e.DeathDate,e.WebLink,e.Biography,e.Note,e.Label,e.FK_AnotherArtist_ID,e.Id,e.Deleted,e.Version FROM Artist e WHERE (e.Name IS @p0)  ähnelt.
        /// </summary>
        internal static string Queryable_Equals_Null {
            get {
                return ResourceManager.GetString("Queryable_Equals_Null", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT e.Name,e.Alias,e.BirthDate,e.DeathDate,e.WebLink,e.Biography,e.Note,e.Label,e.FK_AnotherArtist_ID,e.Id,e.Deleted,e.Version FROM Artist e WHERE (e.Name != @p0)  LIMIT 1 ähnelt.
        /// </summary>
        internal static string Queryable_FirstOrDefault {
            get {
                return ResourceManager.GetString("Queryable_FirstOrDefault", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT e.Name,e.Alias,e.BirthDate,e.DeathDate,e.WebLink,e.Biography,e.Note,e.Label,e.FK_AnotherArtist_ID,e.Id,e.Deleted,e.Version FROM Artist e WHERE (e.Id &gt; @p0)  ähnelt.
        /// </summary>
        internal static string Queryable_GreaterThan {
            get {
                return ResourceManager.GetString("Queryable_GreaterThan", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT e.Name,e.Alias,e.BirthDate,e.DeathDate,e.WebLink,e.Biography,e.Note,e.Label,e.FK_AnotherArtist_ID,e.Id,e.Deleted,e.Version FROM Artist e WHERE (e.Id &gt;= @p0)  ähnelt.
        /// </summary>
        internal static string Queryable_GreaterThan_Or_Equals {
            get {
                return ResourceManager.GetString("Queryable_GreaterThan_Or_Equals", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT e.Name,e.Alias,e.BirthDate,e.DeathDate,e.WebLink,e.Biography,e.Note,e.Label,e.FK_AnotherArtist_ID,e.Id,e.Deleted,e.Version FROM Artist e WHERE (e.Id &lt; @p0)  ähnelt.
        /// </summary>
        internal static string Queryable_LowerThan {
            get {
                return ResourceManager.GetString("Queryable_LowerThan", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT e.Name,e.Alias,e.BirthDate,e.DeathDate,e.WebLink,e.Biography,e.Note,e.Label,e.FK_AnotherArtist_ID,e.Id,e.Deleted,e.Version FROM Artist e WHERE (e.Id &lt;= @p0)  ähnelt.
        /// </summary>
        internal static string Queryable_LowerThan_Or_Equals {
            get {
                return ResourceManager.GetString("Queryable_LowerThan_Or_Equals", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT e.Name,e.Alias,e.BirthDate,e.DeathDate,e.WebLink,e.Biography,e.Note,e.Label,e.FK_AnotherArtist_ID,e.Id,e.Deleted,e.Version FROM Artist e WHERE (((e.Name = @p0) AND (e.Alias = @p1)) OR (e.Deleted = @p2))  ähnelt.
        /// </summary>
        internal static string Queryable_Mixed_And_Or_Conditions {
            get {
                return ResourceManager.GetString("Queryable_Mixed_And_Or_Conditions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT e.Name,e.Alias,e.BirthDate,e.DeathDate,e.WebLink,e.Biography,e.Note,e.Label,e.FK_AnotherArtist_ID,e.Id,e.Deleted,e.Version FROM Artist e  ORDER BY e.Name desc, e.Alias asc ähnelt.
        /// </summary>
        internal static string Queryable_Mixed_Order {
            get {
                return ResourceManager.GetString("Queryable_Mixed_Order", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT e.Name,e.Alias,e.BirthDate,e.DeathDate,e.WebLink,e.Biography,e.Note,e.Label,e.FK_AnotherArtist_ID,e.Id,e.Deleted,e.Version FROM Artist e WHERE ((e.Name = @p0) AND (e.Deleted = @p1))  ähnelt.
        /// </summary>
        internal static string Queryable_Multiple_And_Conditions {
            get {
                return ResourceManager.GetString("Queryable_Multiple_And_Conditions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT e.Name,e.Alias,e.BirthDate,e.DeathDate,e.WebLink,e.Biography,e.Note,e.Label,e.FK_AnotherArtist_ID,e.Id,e.Deleted,e.Version FROM Artist e WHERE ((e.Name = @p0) OR (e.Deleted = @p1))  ähnelt.
        /// </summary>
        internal static string Queryable_Multiple_Or_Conditions {
            get {
                return ResourceManager.GetString("Queryable_Multiple_Or_Conditions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT e.FK_Artist_ID,e.Title,e.Id,e.Deleted,e.Version FROM Song e LEFT JOIN Artist v0 ON v0.Id = e.FK_Artist_ID WHERE (v0.Name IS NOT @p0) AND (e.Title IS NOT @p1)  ähnelt.
        /// </summary>
        internal static string Queryable_Multiple_Where_Resets_EntityMetadata {
            get {
                return ResourceManager.GetString("Queryable_Multiple_Where_Resets_EntityMetadata", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT e.Name,e.Alias,e.BirthDate,e.DeathDate,e.WebLink,e.Biography,e.Note,e.Label,e.FK_AnotherArtist_ID,e.Id,e.Deleted,e.Version FROM Artist e WHERE (e.FK_AnotherArtist_ID IS @p0)  ähnelt.
        /// </summary>
        internal static string Queryable_NonScalar_Property_Check_Results_In_Fk_Check {
            get {
                return ResourceManager.GetString("Queryable_NonScalar_Property_Check_Results_In_Fk_Check", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT e.Name,e.Alias,e.BirthDate,e.DeathDate,e.WebLink,e.Biography,e.Note,e.Label,e.FK_AnotherArtist_ID,e.Id,e.Deleted,e.Version FROM Artist e WHERE (e.Name != @p0)  ähnelt.
        /// </summary>
        internal static string Queryable_Not_Equals {
            get {
                return ResourceManager.GetString("Queryable_Not_Equals", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT e.Name,e.Alias,e.BirthDate,e.DeathDate,e.WebLink,e.Biography,e.Note,e.Label,e.FK_AnotherArtist_ID,e.Id,e.Deleted,e.Version FROM Artist e  ORDER BY e.Name asc, e.Alias asc ähnelt.
        /// </summary>
        internal static string Queryable_OrderBy {
            get {
                return ResourceManager.GetString("Queryable_OrderBy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT e.Name,e.Alias,e.BirthDate,e.DeathDate,e.WebLink,e.Biography,e.Note,e.Label,e.FK_AnotherArtist_ID,e.Id,e.Deleted,e.Version FROM Artist e  ORDER BY e.Name desc, e.Alias desc ähnelt.
        /// </summary>
        internal static string Queryable_OrderByDescending {
            get {
                return ResourceManager.GetString("Queryable_OrderByDescending", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT e.Id as e_Id,e.Name as e_Name FROM Artist e   ähnelt.
        /// </summary>
        internal static string Queryable_Select_Member_Init {
            get {
                return ResourceManager.GetString("Queryable_Select_Member_Init", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT e.Id as e_Id,e.Name as e_Name FROM Artist e   ähnelt.
        /// </summary>
        internal static string Queryable_Select_Member_Init_And_Ctor {
            get {
                return ResourceManager.GetString("Queryable_Select_Member_Init_And_Ctor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT e.Id as e_Id,e.Title as e_Title FROM Song e   ähnelt.
        /// </summary>
        internal static string Queryable_Select_Support_Dynamic_Objects {
            get {
                return ResourceManager.GetString("Queryable_Select_Support_Dynamic_Objects", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT e.Id as e_Id,v1.Name as v1_Name,v1.Alias as v1_Alias,v1.BirthDate as v1_BirthDate,v1.DeathDate as v1_DeathDate,v1.WebLink as v1_WebLink,v1.Biography as v1_Biography,v1.Note as v1_Note,v1.Label as v1_Label,v1.FK_AnotherArtist_ID as v1_FK_AnotherArtist_ID,v1.Id as v1_Id,v1.Deleted as v1_Deleted,v1.Version as v1_Version FROM Song e LEFT JOIN Artist v0 ON v0.Id = e.FK_Artist_ID LEFT JOIN Artist v1 ON v1.Id = v0.FK_AnotherArtist_ID   ähnelt.
        /// </summary>
        internal static string Queryable_Select_Support_Dynamic_Objects_Full_Entity_Select {
            get {
                return ResourceManager.GetString("Queryable_Select_Support_Dynamic_Objects_Full_Entity_Select", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT e.Id as e_Id,v1.Name as v1_Name FROM Song e LEFT JOIN Artist v0 ON v0.Id = e.FK_Artist_ID LEFT JOIN Artist v1 ON v1.Id = v0.FK_AnotherArtist_ID   ähnelt.
        /// </summary>
        internal static string Queryable_Select_Support_Dynamic_Objects_With_Joins {
            get {
                return ResourceManager.GetString("Queryable_Select_Support_Dynamic_Objects_With_Joins", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT e.Id as e_Id,v1.Name as v1_Name FROM Song e LEFT JOIN Artist v0 ON v0.Id = e.FK_Artist_ID LEFT JOIN Artist v1 ON v1.Id = v0.FK_AnotherArtist_ID WHERE ((v0.FK_AnotherArtist_ID IS NOT @p0) AND (e.Title IS NOT @p1))  ähnelt.
        /// </summary>
        internal static string Queryable_Select_Support_Dynamic_Objects_With_Joins_And_Where {
            get {
                return ResourceManager.GetString("Queryable_Select_Support_Dynamic_Objects_With_Joins_And_Where", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT e.Name,e.Alias,e.BirthDate,e.DeathDate,e.WebLink,e.Biography,e.Note,e.Label,e.FK_AnotherArtist_ID,e.Id,e.Deleted,e.Version FROM Artist e WHERE (e.FK_AnotherArtist_ID IS @p0)  LIMIT 2147483647 OFFSET 10 ähnelt.
        /// </summary>
        internal static string Queryable_Skip {
            get {
                return ResourceManager.GetString("Queryable_Skip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT e.Name,e.Alias,e.BirthDate,e.DeathDate,e.WebLink,e.Biography,e.Note,e.Label,e.FK_AnotherArtist_ID,e.Id,e.Deleted,e.Version FROM Artist e WHERE (e.FK_AnotherArtist_ID IS @p0)  LIMIT 10 OFFSET 10 ähnelt.
        /// </summary>
        internal static string Queryable_SkipTake {
            get {
                return ResourceManager.GetString("Queryable_SkipTake", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT e.Name,e.Alias,e.BirthDate,e.DeathDate,e.WebLink,e.Biography,e.Note,e.Label,e.FK_AnotherArtist_ID,e.Id,e.Deleted,e.Version FROM Artist e WHERE (e.FK_AnotherArtist_ID IS @p0)  LIMIT 10 ähnelt.
        /// </summary>
        internal static string Queryable_Take {
            get {
                return ResourceManager.GetString("Queryable_Take", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT e.Name,e.Alias,e.BirthDate,e.DeathDate,e.WebLink,e.Biography,e.Note,e.Label,e.FK_AnotherArtist_ID,e.Id,e.Deleted,e.Version FROM Artist e LEFT JOIN Artist v0 ON v0.Id = e.FK_AnotherArtist_ID LEFT JOIN Artist v1 ON v1.Id = v0.FK_AnotherArtist_ID WHERE ((v0.Name = @p0) AND (v1.Alias = @p1))  ähnelt.
        /// </summary>
        internal static string Queryable_With_Joins {
            get {
                return ResourceManager.GetString("Queryable_With_Joins", resourceCulture);
            }
        }
    }
}
